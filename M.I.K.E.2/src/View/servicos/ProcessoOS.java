/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.servicos;

import Bean.OSInspecaoBean;
import Bean.OSProcessosBean;
import Connection.Session;
import DAO.OSInspecaoDAO;
import DAO.OSProcessosDAO;
import Methods.SoNumeros;
import Methods.Telas;
import View.Geral.EscolherProximoProcesso;
import static View.TelaPrincipal.jDesktopPane1;
import java.awt.Dimension;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marcos Filho
 */
public class ProcessoOS extends javax.swing.JInternalFrame {

    /**
     * Creates new form ProcessoOS
     */
    //Criar DAO e Bean para alterar registros no DB
    static OSProcessosDAO opd = new OSProcessosDAO();
    static OSProcessosBean opb = new OSProcessosBean();

    static OSInspecaoDAO oid = new OSInspecaoDAO();
    static OSInspecaoBean oib = new OSInspecaoBean();

    public ProcessoOS() {
        initComponents();
        camposnumeros();
        escondetxt();
        travarcampos();
    }

    public static void readprocesso() {
        opd.readprocesso(Integer.parseInt(txtidprocesso.getText())).forEach((OSProcessosBean opb2) -> {
            txtprocesso.setText(opb2.getProcesso());
            txtinicio.setText(opb2.getInicio());
            txttermino.setText(opb2.getTermino());
            txtok.setText(String.valueOf(opb2.getQtdok()));
            txtnaook.setText(String.valueOf(opb2.getQtdnaook()));
            txtusuario.setText(opb2.getUsuario());
            txtobservacao.setText(opb2.getObservacao());
            txtmotivo.setText(opb2.getMotivo());
        });
    }

    public static void readinspecao() {
        DefaultTableModel model = (DefaultTableModel) tableinspecao.getModel();
        model.setNumRows(0);

        oid.read(txtidprocesso.getText()).forEach((OSInspecaoBean oib2) -> {
            model.addRow(new Object[]{
                oib2.getId(),
                oib2.getMedida(),
                oib2.getMedidamaior(),
                oib2.getMedidamenor(),
                oib2.getInstrumento()
            });
        });
    }

    public static void camposnumeros() {
        txtok.setDocument(new SoNumeros());
        txtnaook.setDocument(new SoNumeros());
    }

    public static void travarcampos() {
        if (!txttermino.getText().equals("")) {
            txtok.setEnabled(false);
            txtnaook.setEnabled(false);
            btnaddmedicao.setEnabled(false);
            btnsalvar.setEnabled(false);
            txtobservacao.setEditable(false);
        }
    }

    public static void escondetxt() {
        txtdisponivel.setVisible(false);
        txtrow.setVisible(false);
        txtnaookprocesso.setVisible(false);
        txtokprocesso.setVisible(false);
        txtnaookos.setVisible(false);
        txtdispprocesso.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtidprocesso = new javax.swing.JTextField();
        txtprocesso = new javax.swing.JTextField();
        txtinicio = new javax.swing.JTextField();
        txttermino = new javax.swing.JTextField();
        txtok = new javax.swing.JTextField();
        txtnaook = new javax.swing.JTextField();
        txtusuario = new javax.swing.JTextField();
        txtdisponivel = new javax.swing.JTextField();
        txtrow = new javax.swing.JTextField();
        txtnaookprocesso = new javax.swing.JTextField();
        txtdispprocesso = new javax.swing.JTextField();
        txtokprocesso = new javax.swing.JTextField();
        txtnaookos = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableinspecao = new javax.swing.JTable();
        btnaddmedicao = new javax.swing.JButton();
        btnsalvar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtobservacao = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtmotivo = new javax.swing.JTextArea();

        setClosable(true);
        setTitle("Processo");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Processo"));

        jLabel1.setText("ID");

        jLabel2.setText("Processo");

        jLabel3.setText("Início");

        jLabel4.setText("Término");

        jLabel5.setText("Quantidade Conforme");

        jLabel6.setText("Quantidade Não Conforme");

        jLabel7.setText("Usuário");

        txtidprocesso.setEditable(false);
        txtidprocesso.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtprocesso.setEditable(false);
        txtprocesso.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtinicio.setEditable(false);
        txtinicio.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txttermino.setEditable(false);
        txttermino.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtok.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtok.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtokFocusGained(evt);
            }
        });
        txtok.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtokKeyReleased(evt);
            }
        });

        txtnaook.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtnaook.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtnaookFocusGained(evt);
            }
        });
        txtnaook.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtnaookKeyReleased(evt);
            }
        });

        txtusuario.setEditable(false);
        txtusuario.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtdisponivel.setEditable(false);
        txtdisponivel.setToolTipText("Quantidade final da OS");

        txtrow.setEditable(false);
        txtrow.setToolTipText("Row que foi selecionada");

        txtnaookprocesso.setEditable(false);
        txtnaookprocesso.setToolTipText("Quantidade não ok no processo");

        txtdispprocesso.setEditable(false);
        txtdispprocesso.setToolTipText("Quantidade disponível no processo");

        txtokprocesso.setEditable(false);
        txtokprocesso.setToolTipText("Quantidade ok no processo");

        txtnaookos.setEditable(false);
        txtnaookos.setToolTipText("Quantidade morta na OS inteira");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtusuario))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtinicio, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(0, 0, 0)
                        .addComponent(txttermino, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtidprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtdispprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtnaookos, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtokprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtnaookprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtrow, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtdisponivel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtok, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtnaook, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtidprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtdisponivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtrow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtnaookprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtdispprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtokprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtnaookos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtinicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txttermino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(txtok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtnaook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtusuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Inspeções"));

        tableinspecao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Medida Inspecionada", "Maior Valor do Lote", "Menor Valor do Lote", "Instrumento de Medição"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableinspecao);
        if (tableinspecao.getColumnModel().getColumnCount() > 0) {
            tableinspecao.getColumnModel().getColumn(0).setMinWidth(0);
            tableinspecao.getColumnModel().getColumn(0).setPreferredWidth(0);
            tableinspecao.getColumnModel().getColumn(0).setMaxWidth(0);
            tableinspecao.getColumnModel().getColumn(2).setMinWidth(115);
            tableinspecao.getColumnModel().getColumn(2).setPreferredWidth(115);
            tableinspecao.getColumnModel().getColumn(2).setMaxWidth(115);
            tableinspecao.getColumnModel().getColumn(3).setMinWidth(120);
            tableinspecao.getColumnModel().getColumn(3).setPreferredWidth(120);
            tableinspecao.getColumnModel().getColumn(3).setMaxWidth(120);
        }

        btnaddmedicao.setText("Adicionar Medição");
        btnaddmedicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddmedicaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnaddmedicao))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnaddmedicao)
                .addContainerGap())
        );

        btnsalvar.setText("Salvar");
        btnsalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsalvarActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Observações"));

        txtobservacao.setColumns(20);
        txtobservacao.setLineWrap(true);
        txtobservacao.setRows(5);
        txtobservacao.setWrapStyleWord(true);
        txtobservacao.setAutoscrolls(false);
        jScrollPane3.setViewportView(txtobservacao);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Motivo das Peças Não Conformes"));

        txtmotivo.setEditable(false);
        txtmotivo.setColumns(20);
        txtmotivo.setLineWrap(true);
        txtmotivo.setRows(5);
        txtmotivo.setWrapStyleWord(true);
        txtmotivo.setAutoscrolls(false);
        jScrollPane2.setViewportView(txtmotivo);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnsalvar)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnsalvar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnsalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsalvarActionPerformed
        int inicial = Integer.parseInt(txtdisponivel.getText());
        int dispprocesso = Integer.parseInt(txtdispprocesso.getText());
        int okprocesso = Integer.parseInt(txtokprocesso.getText());
        int naookprocesso = Integer.parseInt(txtnaookprocesso.getText());
        int ok = Integer.parseInt(txtok.getText());
        int naook = Integer.parseInt(txtnaook.getText());
        int row = Integer.parseInt(txtrow.getText());
        int newrow = row + 1;
        int resto = inicial - naook;
        if (naook > 0) {
            if (txtmotivo.getText().equals("")) {
                String motivo = JOptionPane.showInputDialog(rootPane, "Qual o motivo das peças não estarem aprovadas?", "Peças reprovadas", JOptionPane.YES_OPTION);
                txtmotivo.setText(motivo);
            } else {
                int resp = JOptionPane.showConfirmDialog(rootPane, "Deseja mudar o motivo das peças estarem reprovadas?", "Alterar motivo", JOptionPane.YES_NO_OPTION);
                if (resp == 0) {
                    String motivo = JOptionPane.showInputDialog(rootPane, "Qual o motivo das peças não estarem aprovadas?", "Peças reprovadas", JOptionPane.YES_OPTION);
                    txtmotivo.setText(motivo);
                }
            }
        } else {
            txtmotivo.setText("");
        }
        if (!txttermino.getText().equals("")) {
            dispose();
        } else if (tableinspecao.getRowCount() == 0) {
            int resp = JOptionPane.showConfirmDialog(rootPane, "Não existem medições! Está correto?", "Sem medições", JOptionPane.YES_NO_OPTION);
            if (resp == 0) {
                if (ok + naook < inicial) {
                    if (okprocesso + naookprocesso + ok + naook == dispprocesso) { //Se as quantidades finalizam o processo
                        //Criar data para término do processo
                        Calendar c = Calendar.getInstance();
                        String pattern = "dd/MM/yyyy HH:mm:ss";
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

                        //Dados para o método chamado no DAO
                        opb.setTermino(simpleDateFormat.format(c.getTime()));
                        opb.setQtdok(Integer.parseInt(txtok.getText()));
                        opb.setQtdnaook(Integer.parseInt(txtnaook.getText()));
                        opb.setObservacao(txtobservacao.getText());
                        opb.setMotivo(txtmotivo.getText());
                        opb.setId(Integer.parseInt(txtidprocesso.getText()));

                        //termino = ?, qtdok = ?, qtdnaook = ?, observacao = ?, motivo = ? WHERE id = ?
                        opd.update(opb);

                        //Alterar valores na tabela de processos na OS
                        DefaultTableModel model = (DefaultTableModel) OS.tableprocessos.getModel();
                        model.setValueAt(simpleDateFormat.format(c.getTime()), row, 4);
                        model.setValueAt(txtok.getText(), row, 5);
                        model.setValueAt(txtnaook.getText(), row, 6);

                        //Atualizar quantidade disponível nos processos seguintes.
                        for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                            if (!OS.tableprocessos.getValueAt(i, 2).equals(txtprocesso.getText()) && OS.tableprocessos.getValueAt(i, 3).equals("")) {
                                OS.tableprocessos.setValueAt(resto, i, 9);
                            }
                        }

                        for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                            OS.tableprocessos.setValueAt(i, i, 8);
                        }
                        for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                            if (OS.tableprocessos.getValueAt(i, 1).equals("")) {
                                opb.setIdos(OS.txtnumeroos.getText());
                                opb.setProcesso(txtprocesso.getText());
                                opb.setInicio("");
                                opb.setTermino("");
                                opb.setQtdok(0);
                                opb.setQtdnaook(0);
                                opb.setUsuario("");
                                opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                                opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());

                                //idos, processo, inicio, termino, qtdok, qtdnaook, usuario, ordem, disponivel
                                opd.create(opb);
                            } else {
                                opb.setIdos(OS.txtnumeroos.getText());
                                opb.setProcesso(OS.tableprocessos.getValueAt(i, 2).toString());
                                opb.setInicio(OS.tableprocessos.getValueAt(i, 3).toString());
                                opb.setTermino(OS.tableprocessos.getValueAt(i, 4).toString());
                                opb.setQtdok(Integer.parseInt(OS.tableprocessos.getValueAt(i, 5).toString()));
                                opb.setQtdnaook(Integer.parseInt(OS.tableprocessos.getValueAt(i, 6).toString()));
                                opb.setUsuario(OS.tableprocessos.getValueAt(i, 7).toString());
                                opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                                opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());
                                opb.setId(Integer.parseInt(OS.tableprocessos.getValueAt(i, 1).toString()));

                                //idos = ?, processo = ?, inicio = ?, termino = ?, qtdok = ?, qtdnaook = ?, usuario = ?, ordem = ?, disponivel = ? WHERE id = ?
                                opd.updatetotal(opb);
                            }
                        }
                        JOptionPane.showMessageDialog(rootPane, "Atualizado com sucesso!");

                        //Atualizar os processos na tela
                        OS.readprocessos();

                        //Atualizar quantidades na OS
                        OS.qtdok();

                        //Verificar se precisa encerrar a OP
                        OS.encerraop();

                        //Fechar a tela
                        dispose();

                        EscolherProximoProcesso epp = new EscolherProximoProcesso(this.getClass().getSimpleName());
                        Telas.AparecerTela(epp);
                    } else { //Se as quantidades não finalizam o processo
                        //Criar data para término do processo
                        Calendar c = Calendar.getInstance();
                        String pattern = "dd/MM/yyyy HH:mm:ss";
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

                        //Dados para o método chamado no DAO
                        opb.setTermino(simpleDateFormat.format(c.getTime()));
                        opb.setQtdok(Integer.parseInt(txtok.getText()));
                        opb.setQtdnaook(Integer.parseInt(txtnaook.getText()));
                        opb.setObservacao(txtobservacao.getText());
                        opb.setMotivo(txtmotivo.getText());
                        opb.setId(Integer.parseInt(txtidprocesso.getText()));

                        //termino = ?, qtdok = ?, qtdnaook = ?, observacao = ?, motivo = ? WHERE id = ?
                        opd.update(opb);

                        //Alterar valores na tabela de processos na OS
                        DefaultTableModel model = (DefaultTableModel) OS.tableprocessos.getModel();
                        model.setValueAt(simpleDateFormat.format(c.getTime()), row, 4);
                        model.setValueAt(txtok.getText(), row, 5);
                        model.setValueAt(txtnaook.getText(), row, 6);

                        //Duplicar processo para que possa ser dada continuidade depois.
                        model.insertRow(newrow, new Object[]{
                            false,
                            "",
                            txtprocesso.getText(),
                            "",
                            "",
                            0,
                            0,
                            "",
                            newrow,
                            txtdispprocesso.getText()
                        });

                        //Atualizar quantidade disponível nos processos seguintes.
                        for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                            if (!OS.tableprocessos.getValueAt(i, 2).equals(txtprocesso.getText()) && OS.tableprocessos.getValueAt(i, 3).equals("")) {
                                model.setValueAt(resto, i, 9);
                            }
                        }

                        //Colocar processos em ordem
                        for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                            OS.tableprocessos.setValueAt(i, i, 8);
                        }
                        for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                            if (OS.tableprocessos.getValueAt(i, 1).equals("")) {
                                opb.setIdos(OS.txtnumeroos.getText());
                                opb.setProcesso(txtprocesso.getText());
                                opb.setInicio("");
                                opb.setTermino("");
                                opb.setQtdok(0);
                                opb.setQtdnaook(0);
                                opb.setUsuario("");
                                opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                                opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());

                                //idos, processo, inicio, termino, qtdok, qtdnaook, usuario, ordem, disponivel
                                opd.create(opb);
                            } else {
                                opb.setIdos(OS.txtnumeroos.getText());
                                opb.setProcesso(OS.tableprocessos.getValueAt(i, 2).toString());
                                opb.setInicio(OS.tableprocessos.getValueAt(i, 3).toString());
                                opb.setTermino(OS.tableprocessos.getValueAt(i, 4).toString());
                                opb.setQtdok(Integer.parseInt(OS.tableprocessos.getValueAt(i, 5).toString()));
                                opb.setQtdnaook(Integer.parseInt(OS.tableprocessos.getValueAt(i, 6).toString()));
                                opb.setUsuario(OS.tableprocessos.getValueAt(i, 7).toString());
                                opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                                opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());
                                opb.setId(Integer.parseInt(OS.tableprocessos.getValueAt(i, 1).toString()));

                                //idos = ?, processo = ?, inicio = ?, termino = ?, qtdok = ?, qtdnaook = ?, usuario = ?, ordem = ?, disponivel = ? WHERE id = ?
                                opd.updatetotal(opb);
                            }
                        }
                        JOptionPane.showMessageDialog(rootPane, "Atualizado com sucesso!");

                        //Atualizar os processos na tela
                        OS.readprocessos();

                        //Atualizar quantidades na OS
                        OS.qtdok();

                        //Verificar se precisa encerrar a OP
                        OS.encerraop();

                        //Fechar a tela
                        dispose();
                    }
                } else { //Se a quantidade de ok + naook == total
                    //Criar data para término do processo
                    Calendar c = Calendar.getInstance();
                    String pattern = "dd/MM/yyyy HH:mm:ss";
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

                    //Dados para o método chamado no DAO
                    opb.setTermino(simpleDateFormat.format(c.getTime()));
                    opb.setQtdok(Integer.parseInt(txtok.getText()));
                    opb.setQtdnaook(Integer.parseInt(txtnaook.getText()));
                    opb.setObservacao(txtobservacao.getText());
                    opb.setMotivo(txtmotivo.getText());
                    opb.setId(Integer.parseInt(txtidprocesso.getText()));

                    //termino = ?, qtdok = ?, qtdnaook = ?, observacao = ?, motivo = ? WHERE id = ?
                    opd.update(opb);

                    //Alterar valores na tabela de processos na OS
                    DefaultTableModel model = (DefaultTableModel) OS.tableprocessos.getModel();
                    model.setValueAt(simpleDateFormat.format(c.getTime()), row, 4);
                    model.setValueAt(txtok.getText(), row, 5);
                    model.setValueAt(txtnaook.getText(), row, 6);

                    //Atualizar quantidade disponível nos processos seguintes.
                    for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                        if (!OS.tableprocessos.getValueAt(i, 2).equals(txtprocesso.getText()) && OS.tableprocessos.getValueAt(i, 3).equals("")) {
                            OS.tableprocessos.setValueAt(resto, i, 9);
                        }
                    }

                    for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                        OS.tableprocessos.setValueAt(i, i, 8);
                    }
                    for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                        if (OS.tableprocessos.getValueAt(i, 1).equals("")) {
                            opb.setIdos(OS.txtnumeroos.getText());
                            opb.setProcesso(txtprocesso.getText());
                            opb.setInicio("");
                            opb.setTermino("");
                            opb.setQtdok(0);
                            opb.setQtdnaook(0);
                            opb.setUsuario("");
                            opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                            opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());

                            //idos, processo, inicio, termino, qtdok, qtdnaook, usuario, ordem, disponivel
                            opd.create(opb);
                        } else {
                            opb.setIdos(OS.txtnumeroos.getText());
                            opb.setProcesso(OS.tableprocessos.getValueAt(i, 2).toString());
                            opb.setInicio(OS.tableprocessos.getValueAt(i, 3).toString());
                            opb.setTermino(OS.tableprocessos.getValueAt(i, 4).toString());
                            opb.setQtdok(Integer.parseInt(OS.tableprocessos.getValueAt(i, 5).toString()));
                            opb.setQtdnaook(Integer.parseInt(OS.tableprocessos.getValueAt(i, 6).toString()));
                            opb.setUsuario(OS.tableprocessos.getValueAt(i, 7).toString());
                            opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                            opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());
                            opb.setId(Integer.parseInt(OS.tableprocessos.getValueAt(i, 1).toString()));

                            //idos = ?, processo = ?, inicio = ?, termino = ?, qtdok = ?, qtdnaook = ?, usuario = ?, ordem = ?, disponivel = ? WHERE id = ?
                            opd.updatetotal(opb);
                        }
                    }
                    JOptionPane.showMessageDialog(rootPane, "Atualizado com sucesso!");

                    //Atualizar os processos na tela
                    OS.readprocessos();

                    //Atualizar quantidades na OS
                    OS.qtdok();

                    //Verificar se precisa encerrar a OP
                    OS.encerraop();

                    //Fechar a tela
                    dispose();
                }
            }
        } else { //Se houver inspeção
            if (ok + naook < inicial) {
                if (okprocesso + naookprocesso + ok + naook == dispprocesso) { //Se as quantidades finalizam o processo
                    //Criar data para término do processo
                    Calendar c = Calendar.getInstance();
                    String pattern = "dd/MM/yyyy HH:mm:ss";
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

                    //Dados para o método chamado no DAO
                    opb.setTermino(simpleDateFormat.format(c.getTime()));
                    opb.setQtdok(Integer.parseInt(txtok.getText()));
                    opb.setQtdnaook(Integer.parseInt(txtnaook.getText()));
                    opb.setObservacao(txtobservacao.getText());
                    opb.setMotivo(txtmotivo.getText());
                    opb.setId(Integer.parseInt(txtidprocesso.getText()));

                    //termino = ?, qtdok = ?, qtdnaook = ?, observacao = ?, motivo = ? WHERE id = ?
                    opd.update(opb);

                    //Alterar valores na tabela de processos na OS
                    DefaultTableModel model = (DefaultTableModel) OS.tableprocessos.getModel();
                    model.setValueAt(simpleDateFormat.format(c.getTime()), row, 4);
                    model.setValueAt(txtok.getText(), row, 5);
                    model.setValueAt(txtnaook.getText(), row, 6);

                    //Atualizar quantidade disponível nos processos seguintes.
                    for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                        if (!OS.tableprocessos.getValueAt(i, 2).equals(txtprocesso.getText()) && OS.tableprocessos.getValueAt(i, 3).equals("")) {
                            OS.tableprocessos.setValueAt(resto, i, 9);
                        }
                    }

                    for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                        OS.tableprocessos.setValueAt(i, i, 8);
                    }
                    for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                        if (OS.tableprocessos.getValueAt(i, 1).equals("")) {
                            opb.setIdos(OS.txtnumeroos.getText());
                            opb.setProcesso(txtprocesso.getText());
                            opb.setInicio("");
                            opb.setTermino("");
                            opb.setQtdok(0);
                            opb.setQtdnaook(0);
                            opb.setUsuario("");
                            opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                            opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());

                            //idos, processo, inicio, termino, qtdok, qtdnaook, usuario, ordem, disponivel
                            opd.create(opb);
                        } else {
                            opb.setIdos(OS.txtnumeroos.getText());
                            opb.setProcesso(OS.tableprocessos.getValueAt(i, 2).toString());
                            opb.setInicio(OS.tableprocessos.getValueAt(i, 3).toString());
                            opb.setTermino(OS.tableprocessos.getValueAt(i, 4).toString());
                            opb.setQtdok(Integer.parseInt(OS.tableprocessos.getValueAt(i, 5).toString()));
                            opb.setQtdnaook(Integer.parseInt(OS.tableprocessos.getValueAt(i, 6).toString()));
                            opb.setUsuario(OS.tableprocessos.getValueAt(i, 7).toString());
                            opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                            opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());
                            opb.setId(Integer.parseInt(OS.tableprocessos.getValueAt(i, 1).toString()));

                            //idos = ?, processo = ?, inicio = ?, termino = ?, qtdok = ?, qtdnaook = ?, usuario = ?, ordem = ?, disponivel = ? WHERE id = ?
                            opd.updatetotal(opb);
                        }
                    }

                    //Dados para método DAO
                    for (int i = 0; i < tableinspecao.getRowCount(); i++) { //Fazer por todas as linhas da table
                        if (tableinspecao.getValueAt(i, 0).equals("")) { //Se não tem ID, criar
                            oib.setIdos(OS.txtnumeroos.getText());
                            oib.setIdprocesso(txtidprocesso.getText());
                            oib.setProcesso(txtprocesso.getText());
                            oib.setMedida(tableinspecao.getValueAt(i, 1).toString());
                            oib.setMedidamaior(tableinspecao.getValueAt(i, 2).toString());
                            oib.setMedidamenor(tableinspecao.getValueAt(i, 3).toString());
                            oib.setFuncionario(Session.nome);
                            oib.setInstrumento(tableinspecao.getValueAt(i, 4).toString());

                            //idos, idprocesso, processo, medida, medidamaior, medidamenor, funcionario, instrumento
                            oid.create(oib);
                        }
                    }

                    JOptionPane.showMessageDialog(rootPane, "Atualizado com sucesso!");

                    //Atualizar os processos na tela
                    OS.readprocessos();

                    //Atualizar quantidades na OS
                    OS.qtdok();

                    //Atualizar table de inspeções
                    OS.readinspecoes();

                    //Verificar se precisa encerrar a OP
                    OS.encerraop();

                    //Fechar a tela
                    dispose();
                } else { //Se as quantidades não finalizam o processo
                    //Criar data para término do processo
                    Calendar c = Calendar.getInstance();
                    String pattern = "dd/MM/yyyy HH:mm:ss";
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

                    //Dados para o método chamado no DAO
                    opb.setTermino(simpleDateFormat.format(c.getTime()));
                    opb.setQtdok(Integer.parseInt(txtok.getText()));
                    opb.setQtdnaook(Integer.parseInt(txtnaook.getText()));
                    opb.setObservacao(txtobservacao.getText());
                    opb.setMotivo(txtmotivo.getText());
                    opb.setId(Integer.parseInt(txtidprocesso.getText()));

                    //termino = ?, qtdok = ?, qtdnaook = ?, observacao = ?, motivo = ? WHERE id = ?
                    opd.update(opb);

                    //Alterar valores na tabela de processos na OS
                    DefaultTableModel model = (DefaultTableModel) OS.tableprocessos.getModel();
                    model.setValueAt(simpleDateFormat.format(c.getTime()), row, 4);
                    model.setValueAt(txtok.getText(), row, 5);
                    model.setValueAt(txtnaook.getText(), row, 6);

                    //Duplicar processo para que possa ser dada continuidade depois.
                    model.insertRow(newrow, new Object[]{
                        false,
                        "",
                        txtprocesso.getText(),
                        "",
                        "",
                        0,
                        0,
                        "",
                        newrow,
                        txtdispprocesso.getText()
                    });

                    //Atualizar quantidade disponível nos processos seguintes.
                    for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                        if (!OS.tableprocessos.getValueAt(i, 2).equals(txtprocesso.getText()) && OS.tableprocessos.getValueAt(i, 3).equals("")) {
                            model.setValueAt(resto, i, 9);
                        }
                    }

                    //Colocar processos em ordem
                    for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                        OS.tableprocessos.setValueAt(i, i, 8);
                    }
                    for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                        if (OS.tableprocessos.getValueAt(i, 1).equals("")) {
                            opb.setIdos(OS.txtnumeroos.getText());
                            opb.setProcesso(txtprocesso.getText());
                            opb.setInicio("");
                            opb.setTermino("");
                            opb.setQtdok(0);
                            opb.setQtdnaook(0);
                            opb.setUsuario("");
                            opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                            opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());

                            //idos, processo, inicio, termino, qtdok, qtdnaook, usuario, ordem, disponivel
                            opd.create(opb);
                        } else {
                            opb.setIdos(OS.txtnumeroos.getText());
                            opb.setProcesso(OS.tableprocessos.getValueAt(i, 2).toString());
                            opb.setInicio(OS.tableprocessos.getValueAt(i, 3).toString());
                            opb.setTermino(OS.tableprocessos.getValueAt(i, 4).toString());
                            opb.setQtdok(Integer.parseInt(OS.tableprocessos.getValueAt(i, 5).toString()));
                            opb.setQtdnaook(Integer.parseInt(OS.tableprocessos.getValueAt(i, 6).toString()));
                            opb.setUsuario(OS.tableprocessos.getValueAt(i, 7).toString());
                            opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                            opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());
                            opb.setId(Integer.parseInt(OS.tableprocessos.getValueAt(i, 1).toString()));

                            //idos = ?, processo = ?, inicio = ?, termino = ?, qtdok = ?, qtdnaook = ?, usuario = ?, ordem = ?, disponivel = ? WHERE id = ?
                            opd.updatetotal(opb);
                        }
                    }

                    //Dados para método DAO
                    for (int i = 0; i < tableinspecao.getRowCount(); i++) { //Fazer por todas as linhas da table
                        if (tableinspecao.getValueAt(i, 0).equals("")) { //Se não tem ID, criar
                            oib.setIdos(OS.txtnumeroos.getText());
                            oib.setIdprocesso(txtidprocesso.getText());
                            oib.setProcesso(txtprocesso.getText());
                            oib.setMedida(tableinspecao.getValueAt(i, 1).toString());
                            oib.setMedidamaior(tableinspecao.getValueAt(i, 2).toString());
                            oib.setMedidamenor(tableinspecao.getValueAt(i, 3).toString());
                            oib.setFuncionario(Session.nome);
                            oib.setInstrumento(tableinspecao.getValueAt(i, 4).toString());

                            //idos, idprocesso, processo, medida, medidamaior, medidamenor, funcionario, instrumento
                            oid.create(oib);
                        }
                    }

                    JOptionPane.showMessageDialog(rootPane, "Atualizado com sucesso!");

                    //Atualizar os processos na tela
                    OS.readprocessos();

                    //Atualizar quantidades na OS
                    OS.qtdok();

                    //Atualizar table de inspeções
                    OS.readinspecoes();

                    //Verificar se precisa encerrar a OP
                    OS.encerraop();

                    //Fechar a tela
                    dispose();
                }
            } else { //Se a quantidade de ok + naook == total
                //Criar data para término do processo
                Calendar c = Calendar.getInstance();
                String pattern = "dd/MM/yyyy HH:mm:ss";
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

                //Dados para o método chamado no DAO
                opb.setTermino(simpleDateFormat.format(c.getTime()));
                opb.setQtdok(Integer.parseInt(txtok.getText()));
                opb.setQtdnaook(Integer.parseInt(txtnaook.getText()));
                opb.setObservacao(txtobservacao.getText());
                opb.setMotivo(txtmotivo.getText());
                opb.setId(Integer.parseInt(txtidprocesso.getText()));

                //termino = ?, qtdok = ?, qtdnaook = ?, observacao = ?, motivo = ? WHERE id = ?
                opd.update(opb);

                //Alterar valores na tabela de processos na OS
                DefaultTableModel model = (DefaultTableModel) OS.tableprocessos.getModel();
                model.setValueAt(simpleDateFormat.format(c.getTime()), row, 4);
                model.setValueAt(txtok.getText(), row, 5);
                model.setValueAt(txtnaook.getText(), row, 6);

                //Atualizar quantidade disponível nos processos seguintes.
                for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                    if (!OS.tableprocessos.getValueAt(i, 2).equals(txtprocesso.getText()) && OS.tableprocessos.getValueAt(i, 3).equals("")) {
                        OS.tableprocessos.setValueAt(resto, i, 9);
                    }
                }

                for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                    OS.tableprocessos.setValueAt(i, i, 8);
                }
                for (int i = 0; i < OS.tableprocessos.getRowCount(); i++) {
                    if (OS.tableprocessos.getValueAt(i, 1).equals("")) {
                        opb.setIdos(OS.txtnumeroos.getText());
                        opb.setProcesso(txtprocesso.getText());
                        opb.setInicio("");
                        opb.setTermino("");
                        opb.setQtdok(0);
                        opb.setQtdnaook(0);
                        opb.setUsuario("");
                        opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                        opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());

                        //idos, processo, inicio, termino, qtdok, qtdnaook, usuario, ordem, disponivel
                        opd.create(opb);
                    } else {
                        opb.setIdos(OS.txtnumeroos.getText());
                        opb.setProcesso(OS.tableprocessos.getValueAt(i, 2).toString());
                        opb.setInicio(OS.tableprocessos.getValueAt(i, 3).toString());
                        opb.setTermino(OS.tableprocessos.getValueAt(i, 4).toString());
                        opb.setQtdok(Integer.parseInt(OS.tableprocessos.getValueAt(i, 5).toString()));
                        opb.setQtdnaook(Integer.parseInt(OS.tableprocessos.getValueAt(i, 6).toString()));
                        opb.setUsuario(OS.tableprocessos.getValueAt(i, 7).toString());
                        opb.setOrdem(Integer.parseInt(OS.tableprocessos.getValueAt(i, 8).toString()));
                        opb.setDisponivel(OS.tableprocessos.getValueAt(i, 9).toString());
                        opb.setId(Integer.parseInt(OS.tableprocessos.getValueAt(i, 1).toString()));

                        //idos = ?, processo = ?, inicio = ?, termino = ?, qtdok = ?, qtdnaook = ?, usuario = ?, ordem = ?, disponivel = ? WHERE id = ?
                        opd.updatetotal(opb);
                    }
                }

                //Dados para método DAO
                for (int i = 0; i < tableinspecao.getRowCount(); i++) { //Fazer por todas as linhas da table
                    if (tableinspecao.getValueAt(i, 0).equals("")) { //Se não tem ID, criar
                        oib.setIdos(OS.txtnumeroos.getText());
                        oib.setIdprocesso(txtidprocesso.getText());
                        oib.setProcesso(txtprocesso.getText());
                        oib.setMedida(tableinspecao.getValueAt(i, 1).toString());
                        oib.setMedidamaior(tableinspecao.getValueAt(i, 2).toString());
                        oib.setMedidamenor(tableinspecao.getValueAt(i, 3).toString());
                        oib.setFuncionario(Session.nome);
                        oib.setInstrumento(tableinspecao.getValueAt(i, 4).toString());

                        //idos, idprocesso, processo, medida, medidamaior, medidamenor, funcionario, instrumento
                        oid.create(oib);
                    }
                }

                JOptionPane.showMessageDialog(rootPane, "Atualizado com sucesso!");

                //Atualizar os processos na tela
                OS.readprocessos();

                //Atualizar quantidades na OS
                OS.qtdok();

                //Atualizar table de inspeções
                OS.readinspecoes();

                //Verificar se precisa encerrar a OP
                OS.encerraop();

                //Fechar a tela
                dispose();
            }
        }
    }//GEN-LAST:event_btnsalvarActionPerformed

    private void txtokFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtokFocusGained
        txtok.selectAll();
    }//GEN-LAST:event_txtokFocusGained

    private void txtnaookFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtnaookFocusGained
        txtnaook.selectAll();
    }//GEN-LAST:event_txtnaookFocusGained

    private void btnaddmedicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddmedicaoActionPerformed
        MedicaoOS p = new MedicaoOS();
        JDesktopPane desk = this.getDesktopPane();
        desk.add(p);
        Dimension desktopsize = jDesktopPane1.getSize();
        Dimension jinternalframesize = p.getSize();
        p.setLocation((desktopsize.width - jinternalframesize.width) / 2, (desktopsize.height - jinternalframesize.height) / 2);
        p.setVisible(true);
    }//GEN-LAST:event_btnaddmedicaoActionPerformed

    private void txtokKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtokKeyReleased
        int ok = Integer.parseInt(txtok.getText());
//        JOptionPane.showMessageDialog(rootPane, "Quantidade ok: " + ok);
        int naook = Integer.parseInt(txtnaook.getText());
//        JOptionPane.showMessageDialog(rootPane, "Quantidade morta: " + naook);
        int totalprocesso = Integer.parseInt(txtdispprocesso.getText());
//        JOptionPane.showMessageDialog(rootPane, "Disponível no processo: " + totalprocesso);
        int okprocesso = Integer.parseInt(txtokprocesso.getText());
//        JOptionPane.showMessageDialog(rootPane, "Ok no processo: " + okprocesso);
        int naookprocesso = Integer.parseInt(txtnaookprocesso.getText());
//        JOptionPane.showMessageDialog(rootPane, "Não ok no processo: " + naookprocesso);
        int dispprocesso2 = totalprocesso - okprocesso - naookprocesso;
//        JOptionPane.showMessageDialog(rootPane, "Ainda disponível no processo (Disponível - ok + naook): " + dispprocesso2);
        if (ok + naook > dispprocesso2) {
            JOptionPane.showMessageDialog(rootPane, "Quantidade aprovada + Quantidade reprovada maior que a quantidade da OS.\nPor favor insira uma quantidade aceitável.");
            txtok.setText("0");
            txtok.requestFocus();
            txtok.selectAll();
        }
    }//GEN-LAST:event_txtokKeyReleased

    private void txtnaookKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnaookKeyReleased
        int ok = Integer.parseInt(txtok.getText());
//        JOptionPane.showMessageDialog(rootPane, "Quantidade ok: " + ok);
        int naook = Integer.parseInt(txtnaook.getText());
//        JOptionPane.showMessageDialog(rootPane, "Quantidade morta: " + naook);
        int totalprocesso = Integer.parseInt(txtdispprocesso.getText());
//        JOptionPane.showMessageDialog(rootPane, "Disponível no processo: " + totalprocesso);
        int okprocesso = Integer.parseInt(txtokprocesso.getText());
//        JOptionPane.showMessageDialog(rootPane, "Ok no processo: " + okprocesso);
        int naookprocesso = Integer.parseInt(txtnaookprocesso.getText());
//        JOptionPane.showMessageDialog(rootPane, "Não ok no processo: " + naookprocesso);
        int dispprocesso2 = totalprocesso - okprocesso - naookprocesso;
//        JOptionPane.showMessageDialog(rootPane, "Ainda disponível no processo (Disponível - ok + naook): " + dispprocesso2);
        if (ok + naook > dispprocesso2) {
            JOptionPane.showMessageDialog(rootPane, "Quantidade aprovada + Quantidade reprovada maior que a quantidade da OS.\nPor favor insira uma quantidade aceitável.");
            txtnaook.setText("0");
            txtnaook.requestFocus();
            txtnaook.selectAll();
        }
    }//GEN-LAST:event_txtnaookKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnaddmedicao;
    public static javax.swing.JButton btnsalvar;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    public javax.swing.JPanel jPanel5;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable tableinspecao;
    public static javax.swing.JTextField txtdisponivel;
    public static javax.swing.JTextField txtdispprocesso;
    public static javax.swing.JTextField txtidprocesso;
    public static javax.swing.JTextField txtinicio;
    public static javax.swing.JTextArea txtmotivo;
    public static javax.swing.JTextField txtnaook;
    public static javax.swing.JTextField txtnaookos;
    public static javax.swing.JTextField txtnaookprocesso;
    public static javax.swing.JTextArea txtobservacao;
    public static javax.swing.JTextField txtok;
    public static javax.swing.JTextField txtokprocesso;
    public static javax.swing.JTextField txtprocesso;
    public static javax.swing.JTextField txtrow;
    public static javax.swing.JTextField txttermino;
    public static javax.swing.JTextField txtusuario;
    // End of variables declaration//GEN-END:variables
}
