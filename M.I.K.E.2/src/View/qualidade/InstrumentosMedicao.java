/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.qualidade;

import Bean.InstrumentosMedicaoBean;
import Bean.InstrumentosMedicaoCalibracaoBean;
import DAO.InstrumentosMedicaoCalibracaoDAO;
import DAO.InstrumentosMedicaoDAO;
import Methods.SendEmail;
import static View.TelaPrincipal.jDesktopPane1;
import View.servicos.DocumentosOrcamentoServico;
import java.awt.AWTException;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marcos Filho
 */
public class InstrumentosMedicao extends javax.swing.JInternalFrame {

    /**
     * Creates new form InstrumentosMedicao
     */
    public InstrumentosMedicao() {
        initComponents();
        txtid.setVisible(false);
        readinstrumentos();
    }

    public static void readinstrumentos() {
        InstrumentosMedicaoDAO imd = new InstrumentosMedicaoDAO();
        DefaultTableModel model = (DefaultTableModel) tableinstrumentos.getModel();

        for (InstrumentosMedicaoBean imb : imd.read()) {
            model.addRow(new Object[]{
                imb.getId(),
                imb.getCodigo(),
                imb.getTipo(),
                imb.getValidade(),
                imb.getStatus()
            });
        }
    }

    public static void checknrc() {
        if (checknrc.isSelected()) {
            txtperiodicidade.setEnabled(false);
            btnadicionarcalibracao.setEnabled(false);
        } else {
            txtperiodicidade.setEnabled(true);
            btnadicionarcalibracao.setEnabled(true);
        }
    }
    
    public static void camposembranco() {
        txtcodigo.setText("");
        cbstatusinstrumento.setSelectedIndex(0);
        cbtipo.setSelectedIndex(0);
        txtmodelo.setText("");
        txtserie.setText("");
        txtcapacidade.setText("");
        txtresolucao.setText("");
        txttolerancia.setText("");
        txtid.setText("");
        txtperiodicidade.setText("");
        txtperiodicidade.setEnabled(true);
        txtlocal.setText("");
        checknrc.setSelected(false);
        btnadicionarcalibracao.setEnabled(true);
        DefaultTableModel model = (DefaultTableModel) tablecertificados.getModel();
        model.setNumRows(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabinstrumentos = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtpesquisa = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbstatus = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableinstrumentos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtcodigo = new javax.swing.JTextField();
        txtserie = new javax.swing.JTextField();
        txtmodelo = new javax.swing.JTextField();
        cbtipo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cbstatusinstrumento = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtcapacidade = new javax.swing.JTextField();
        txtresolucao = new javax.swing.JTextField();
        txttolerancia = new javax.swing.JTextField();
        txtperiodicidade = new javax.swing.JTextField();
        txtlocal = new javax.swing.JTextField();
        txtid = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablecertificados = new javax.swing.JTable();
        btnadicionarcalibracao = new javax.swing.JButton();
        checknrc = new javax.swing.JCheckBox();

        setClosable(true);
        setTitle("Instrumentos de Medição");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisa"));

        jLabel1.setText("Pesquisar:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtpesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtpesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));

        jLabel2.setText("Status");

        cbstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Em Uso", "Em Calibração", "Fora de Uso" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbstatus, 0, 186, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableinstrumentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Código", "Tipo", "Validade", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableinstrumentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableinstrumentosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableinstrumentos);
        if (tableinstrumentos.getColumnModel().getColumnCount() > 0) {
            tableinstrumentos.getColumnModel().getColumn(0).setMinWidth(0);
            tableinstrumentos.getColumnModel().getColumn(0).setPreferredWidth(0);
            tableinstrumentos.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabinstrumentos.addTab("Lista de Instrumentos", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Instrumento"));

        jLabel3.setText("Código");

        jLabel4.setText("Tipo");

        jLabel5.setText("Número de Série");

        jLabel6.setText("Modelo");

        cbtipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Micrômetro Externo", "Paquímetro Quadrimensional", "Projetor de Perfil", "Relógio", "Durômetro" }));

        jLabel12.setText("Status");

        cbstatusinstrumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Em Uso", "Fora de Uso", "Em Calibração" }));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtmodelo, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtserie, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(19, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbstatusinstrumento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbtipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(cbstatusinstrumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbtipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtmodelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtserie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Especificações"));

        jLabel7.setText("Capacidade");

        jLabel8.setText("Resolução");

        jLabel9.setText("Tolerância de Aceitação");

        jLabel10.setText("Periodicidade (dias)");

        jLabel11.setText("Local de Uso");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtperiodicidade, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtlocal))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtcapacidade, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtresolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txttolerancia, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtid)))
                        .addGap(0, 44, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtcapacidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtresolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txttolerancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtperiodicidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtlocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jButton1.setText("Salvar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Novo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Certificados Calibração"));

        tablecertificados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Certificado", "Data Calibração", "Validade", "Local", "Local Original"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablecertificados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablecertificadosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablecertificados);
        if (tablecertificados.getColumnModel().getColumnCount() > 0) {
            tablecertificados.getColumnModel().getColumn(0).setMinWidth(0);
            tablecertificados.getColumnModel().getColumn(0).setPreferredWidth(0);
            tablecertificados.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        btnadicionarcalibracao.setText("Adicionar");
        btnadicionarcalibracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnadicionarcalibracaoActionPerformed(evt);
            }
        });

        checknrc.setText("Não Requer Calibração");
        checknrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checknrcActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(checknrc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnadicionarcalibracao))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnadicionarcalibracao)
                    .addComponent(checknrc)))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        tabinstrumentos.addTab("Instrumento de Medição", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabinstrumentos)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabinstrumentos)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnadicionarcalibracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnadicionarcalibracaoActionPerformed
        if (txtperiodicidade.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Coloque uma periodicidade antes.");
            txtperiodicidade.requestFocus();
        } else {
            DocumentosInstrumentos p = new DocumentosInstrumentos();
            JDesktopPane desk = this.getDesktopPane();
            desk.add(p);
            Dimension desktopsize = jDesktopPane1.getSize();
            Dimension jinternalframesize = p.getSize();
            p.setLocation((desktopsize.width - jinternalframesize.width) / 2, (desktopsize.height - jinternalframesize.height) / 2);
            p.setVisible(true);
        }
    }//GEN-LAST:event_btnadicionarcalibracaoActionPerformed

    private void checknrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checknrcActionPerformed
        checknrc();
    }//GEN-LAST:event_checknrcActionPerformed

    private void tableinstrumentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableinstrumentosMouseClicked
        if (evt.getClickCount() == 2) {
            tabinstrumentos.setSelectedIndex(1);
            txtid.setText(tableinstrumentos.getValueAt(tableinstrumentos.getSelectedRow(), 0).toString());

            InstrumentosMedicaoDAO imd = new InstrumentosMedicaoDAO();

            for (InstrumentosMedicaoBean imb : imd.click(Integer.parseInt(tableinstrumentos.getValueAt(tableinstrumentos.getSelectedRow(), 0).toString()))) {
                txtcodigo.setText(imb.getCodigo());
                cbstatusinstrumento.setSelectedItem(imb.getStatus());
                cbtipo.setSelectedItem(imb.getTipo());
                txtmodelo.setText(imb.getModelo());
                txtserie.setText(imb.getSerie());
                txtcapacidade.setText(imb.getCapacidade());
                txtresolucao.setText(imb.getResolucao());
                txttolerancia.setText(imb.getTolerancia());
                txtperiodicidade.setText(String.valueOf(imb.getPeriodicidade()));
                txtlocal.setText(imb.getLocal());
                if (imb.getNrc().equals("false")) {
                    checknrc.setSelected(false);
                } else {
                    checknrc.setSelected(true);
                    txtperiodicidade.setEnabled(false);
                }
            }

            InstrumentosMedicaoCalibracaoDAO imcd = new InstrumentosMedicaoCalibracaoDAO();
            DefaultTableModel model = (DefaultTableModel) tablecertificados.getModel();

            for (InstrumentosMedicaoCalibracaoBean imdb : imcd.read(txtcodigo.getText())) {
                model.addRow(new Object[]{
                    imdb.getId(),
                    imdb.getCertificado(),
                    imdb.getDatacalibracao(),
                    imdb.getValidade(),
                    imdb.getLocal()
                });
            }
        }
    }//GEN-LAST:event_tableinstrumentosMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (txtid.getText().equals("")) {
            if (txtcodigo.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Coloque um código.");
                txtcodigo.requestFocus();
            } else if (cbstatus.getSelectedItem().equals("Selecione")) {
                JOptionPane.showMessageDialog(rootPane, "Selecione um status.");
            } else if (cbtipo.getSelectedItem().equals("Selecione")) {
                JOptionPane.showMessageDialog(rootPane, "Selecione um tipo.");
            } else if (txtcapacidade.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Coloque uma capacidade.");
                txtcapacidade.requestFocus();
            } else if (txttolerancia.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Coloque uma tolerância.");
                txttolerancia.requestFocus();
            } else if (txtlocal.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Coloque um local de uso.");
                txtlocal.requestFocus();
            } else if (txtperiodicidade.getText().equals("") && !checknrc.isSelected()) {
                JOptionPane.showMessageDialog(rootPane, "Coloque uma periodicidade.");
                txtperiodicidade.requestFocus();
            } else {
                InstrumentosMedicaoDAO imd = new InstrumentosMedicaoDAO();
                InstrumentosMedicaoBean imb = new InstrumentosMedicaoBean();

                imb.setCodigo(txtcodigo.getText());
                imb.setStatus(cbstatusinstrumento.getSelectedItem().toString());
                imb.setTipo(cbtipo.getSelectedItem().toString());
                imb.setModelo(txtmodelo.getText());
                imb.setSerie(txtserie.getText());
                imb.setCapacidade(txtcapacidade.getText());
                imb.setResolucao(txtresolucao.getText());
                imb.setTolerancia(txttolerancia.getText());
                if (txtperiodicidade.getText().equals("")) {
                    imb.setPeriodicidade(0);
                } else {
                    imb.setPeriodicidade(Integer.parseInt(txtperiodicidade.getText()));
                }
                imb.setLocal(txtlocal.getText());
                if (checknrc.isSelected()) {
                    imb.setNrc("true");
                    imb.setValidade("N/A");
                } else {
                    imb.setNrc("false");
                    for (int i = 0; i < tablecertificados.getRowCount(); i++) {
                        imb.setValidade(tablecertificados.getValueAt(tablecertificados.getRowCount(), 3).toString());
                    }
                }

                //codigo, status, tipo, modelo, serie, capacidade, resolucao, tolerancia, periodicidade, local, nrc, validade
                imd.create(imb);

                int rc = tablecertificados.getRowCount();
                if (rc > 0) {
                    for (int i = 0; i < rc; i++) {
                        String id = "";
                        for (InstrumentosMedicaoBean imb2 : imd.readid(txtcodigo.getText())) {
                            id = String.valueOf(imb2.getId());
                        }
                        File fileoriginal = new File(tablecertificados.getValueAt(i, 5).toString());
                        File folder = new File("Q:/MIKE_ERP/int_med_arq/" + id);
                        File filecopy = new File(folder + "/" + fileoriginal.getName());

                        folder.mkdirs();
                        try {
                            Files.copy(fileoriginal.toPath(), filecopy.toPath(), COPY_ATTRIBUTES);
                        } catch (IOException ex) {
                            Logger.getLogger(DocumentosOrcamentoServico.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, "Erro ao salvar!\n" + ex + "\nEnviando e-mail para suporte.");
                            try {
                                SendEmail.EnviarErro(ex.toString());
                                JOptionPane.showMessageDialog(rootPane, "E-mail com erro enviado com sucesso!");
                            } catch (HeadlessException hex) {
                                JOptionPane.showMessageDialog(rootPane, "Erro!\n" + hex);
                            } catch (AWTException | IOException ex1) {
                                Logger.getLogger(DocumentosOrcamentoServico.class.getName()).log(Level.SEVERE, null, ex1);
                            }
                        }
                        InstrumentosMedicaoCalibracaoDAO imcd = new InstrumentosMedicaoCalibracaoDAO();
                        InstrumentosMedicaoCalibracaoBean imcb = new InstrumentosMedicaoCalibracaoBean();

                        imcb.setCodigoinstrumento(txtcodigo.getText());
                        imcb.setCertificado(tablecertificados.getValueAt(i, 1).toString());
                        imcb.setDatacalibracao(tablecertificados.getValueAt(i, 2).toString());
                        imcb.setValidade(tablecertificados.getValueAt(i, 3).toString());
                        imcb.setLocal(tablecertificados.getValueAt(i, 4).toString());

                        //codigoinstrumento, certificado, datacalibracao, validade, local
                        imcd.create(imcb);
                    }
                }
            }
            JOptionPane.showMessageDialog(rootPane, "Salvo com sucesso!");
            
            DefaultTableModel model = (DefaultTableModel) tableinstrumentos.getModel();
            model.setNumRows(0);
            readinstrumentos();
        } else {
            InstrumentosMedicaoDAO imd = new InstrumentosMedicaoDAO();
            InstrumentosMedicaoBean imb = new InstrumentosMedicaoBean();

            imb.setCodigo(txtcodigo.getText());
            imb.setStatus(cbstatusinstrumento.getSelectedItem().toString());
            imb.setTipo(cbtipo.getSelectedItem().toString());
            imb.setModelo(txtmodelo.getText());
            imb.setSerie(txtserie.getText());
            imb.setCapacidade(txtcapacidade.getText());
            imb.setResolucao(txtresolucao.getText());
            imb.setTolerancia(txttolerancia.getText());
            if (txtperiodicidade.getText().equals("")) {
                imb.setPeriodicidade(0);
            } else {
                imb.setPeriodicidade(Integer.parseInt(txtperiodicidade.getText()));
            }
            imb.setLocal(txtlocal.getText());
            if (checknrc.isSelected()) {
                imb.setNrc("true");
                imb.setValidade("N/A");
            } else {
                imb.setNrc("false");
                for (int i = 0; i < tablecertificados.getRowCount(); i++) {
                    imb.setValidade(tablecertificados.getValueAt(tablecertificados.getRowCount(), 3).toString());
                }
            }
            imb.setId(Integer.parseInt(txtid.getText()));

            //codigo = ?, status = ?, tipo = ?, modelo = ?, serie = ?, capacidade = ?, resolucao = ?, tolerancia = ?, periodicidade = ?, local = ?, nrc = ?, validade = ? WHERE id = ?
            imd.update(imb);

            int rc = tablecertificados.getRowCount();
            if (rc > 0) {
                for (int i = 0; i < rc; i++) {
                    if (tablecertificados.getValueAt(i, 0).equals("")) {
                        String id = "";
                        for (InstrumentosMedicaoBean imb2 : imd.readid(txtcodigo.getText())) {
                            id = String.valueOf(imb2.getId());
                        }
                        File fileoriginal = new File(tablecertificados.getValueAt(i, 5).toString());
                        File folder = new File("Q:/MIKE_ERP/int_med_arq/" + id);
                        File filecopy = new File(folder + "/" + fileoriginal.getName());

                        folder.mkdirs();
                        try {
                            Files.copy(fileoriginal.toPath(), filecopy.toPath(), COPY_ATTRIBUTES);
                        } catch (IOException ex) {
                            Logger.getLogger(DocumentosOrcamentoServico.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, "Erro ao salvar!\n" + ex + "\nEnviando e-mail para suporte.");
                            try {
                                SendEmail.EnviarErro(ex.toString());
                                JOptionPane.showMessageDialog(rootPane, "E-mail com erro enviado com sucesso!");
                            } catch (HeadlessException hex) {
                                JOptionPane.showMessageDialog(rootPane, "Erro!\n" + hex);
                            } catch (AWTException | IOException ex1) {
                                Logger.getLogger(DocumentosOrcamentoServico.class.getName()).log(Level.SEVERE, null, ex1);
                            }
                        }
                        InstrumentosMedicaoCalibracaoDAO imcd = new InstrumentosMedicaoCalibracaoDAO();
                        InstrumentosMedicaoCalibracaoBean imcb = new InstrumentosMedicaoCalibracaoBean();

                        imcb.setCodigoinstrumento(txtcodigo.getText());
                        imcb.setCertificado(tablecertificados.getValueAt(i, 1).toString());
                        imcb.setDatacalibracao(tablecertificados.getValueAt(i, 2).toString());
                        imcb.setValidade(tablecertificados.getValueAt(i, 3).toString());
                        imcb.setLocal(tablecertificados.getValueAt(i, 4).toString());

                        //codigoinstrumento, certificado, datacalibracao, validade, local
                        imcd.create(imcb);
                    }
                }
            }
            JOptionPane.showMessageDialog(rootPane, "Atualizado com sucesso!");
            
            DefaultTableModel model = (DefaultTableModel) tableinstrumentos.getModel();
            model.setNumRows(0);
            
            readinstrumentos();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tablecertificadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablecertificadosMouseClicked
        if (evt.getClickCount() == 2) {
            Desktop desk = Desktop.getDesktop();
            try {
                desk.open(new File((String) tablecertificados.getValueAt(tablecertificados.getSelectedRow(), 4)));
            } catch (IOException ex) {
                Logger.getLogger(DocumentosOrcamentoServico.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tablecertificadosMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int resp = JOptionPane.showConfirmDialog(rootPane, "Deseja cadastrar outro Instrumento de Medição?", "Cadastrar Novo", JOptionPane.YES_NO_OPTION);
        if (resp == 0) {
            camposembranco();
            txtcodigo.requestFocus();
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnadicionarcalibracao;
    public javax.swing.JComboBox<String> cbstatus;
    public static javax.swing.JComboBox<String> cbstatusinstrumento;
    public static javax.swing.JComboBox<String> cbtipo;
    public static javax.swing.JCheckBox checknrc;
    public static javax.swing.JButton jButton1;
    public static javax.swing.JButton jButton2;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel10;
    public javax.swing.JLabel jLabel11;
    public javax.swing.JLabel jLabel12;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    public javax.swing.JLabel jLabel9;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    public javax.swing.JPanel jPanel5;
    public javax.swing.JPanel jPanel6;
    public javax.swing.JPanel jPanel7;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTabbedPane tabinstrumentos;
    public static javax.swing.JTable tablecertificados;
    public static javax.swing.JTable tableinstrumentos;
    public static javax.swing.JTextField txtcapacidade;
    public static javax.swing.JTextField txtcodigo;
    public static javax.swing.JTextField txtid;
    public static javax.swing.JTextField txtlocal;
    public static javax.swing.JTextField txtmodelo;
    public static javax.swing.JTextField txtperiodicidade;
    public javax.swing.JTextField txtpesquisa;
    public static javax.swing.JTextField txtresolucao;
    public static javax.swing.JTextField txtserie;
    public static javax.swing.JTextField txttolerancia;
    // End of variables declaration//GEN-END:variables
}
