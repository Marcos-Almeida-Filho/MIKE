/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.Geral;

import Bean.F_UPBean;
import Bean.OSBean;
import Bean.ServicoMateriaisBean;
import Bean.ServicoMateriaisMovimentacaoBean;
import DAO.CAPDAO;
import DAO.F_UPDAO;
import DAO.OSDAO;
import DAO.ServicoMateriaisDAO;
import DAO.ServicoMateriaisMovimentacaoDAO;
import Methods.Dates;
import View.financeiro.ContasPagar;
import View.servicos.OS;

/**
 *
 * @author Marcos Filho
 */
public class MudarStatus extends javax.swing.JInternalFrame {

    /**
     * Creates new form StatusEmLote
     *
     */
    ServicoMateriaisDAO smd = new ServicoMateriaisDAO();
    ServicoMateriaisBean smb = new ServicoMateriaisBean();
    ServicoMateriaisMovimentacaoDAO smmd = new ServicoMateriaisMovimentacaoDAO();
    ServicoMateriaisMovimentacaoBean smmb = new ServicoMateriaisMovimentacaoBean();
    OSDAO od = new OSDAO();
    OSBean ob = new OSBean();
    F_UPDAO fud = new F_UPDAO();
    F_UPBean fub = new F_UPBean();

    int est = 0;
    int idmaterial;

    public String origem;

    public MudarStatus(String[] ops, String title, String origin) {
        initComponents();
        for (String op : ops) {
            cbstatus.addItem(op);
        }
        this.setTitle(title);

        origem = origin;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbstatus = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Mudar Status em Lote");

        cbstatus.setName("cbstatus"); // NOI18N

        jButton1.setText("OK");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        switch (origem) {
            case "CAP":
                for (int i = 0; i < ContasPagar.tablecap.getRowCount(); i++) {
                    if (ContasPagar.tablecap.getValueAt(i, 0).equals(true)) {
                        CAPDAO cd = new CAPDAO();

                        //status = ? WHERE id = ?
                        cd.updatestatus(cbstatus.getSelectedItem().toString(), Integer.parseInt(ContasPagar.tablecap.getValueAt(i, 1).toString()));
                    }
                }
                ContasPagar.readtablecap();
                dispose();
                break;
            case "OSLote":
                switch (cbstatus.getSelectedItem().toString()) {
                    case "Fechado":
                        for (int i = 0; i < OS.tableos.getRowCount(); i++) {
                            if (OS.tableos.getValueAt(i, 0).equals(true)) {
                                String idtela = OS.tableos.getValueAt(i, 1).toString();

                                ob.setStatus(cbstatus.getSelectedItem().toString());
                                ob.setIdtela(idtela);

                                //SET status = ? WHERE idtela = ?
                                od.updatestatus(ob);

                                fub.setProcesso("Encerrado");
                                fub.setOp(idtela);

                                //processo = ? WHERE op = ?
                                fud.updateProcessoByOs(fub);
                            }
                        }
                        break;
                    case "Cancelado":
                        for (int i = 0; i < OS.tableos.getRowCount(); i++) {
                            if (OS.tableos.getValueAt(i, 0).equals(true)) {
                                String idtela = OS.tableos.getValueAt(i, 1).toString();

                                ob.setStatus(cbstatus.getSelectedItem().toString());
                                ob.setIdtela(idtela);

                                //SET status = ? WHERE idtela = ?
                                od.updatestatus(ob);

                                fub.setProcesso("Cancelado");
                                fub.setOp(idtela);

                                //processo = ? WHERE op = ?
                                fud.updateProcessoByOs(fub);
                            }
                        }
                        break;
                    default:
                        for (int i = 0; i < OS.tableos.getRowCount(); i++) {
                            if (OS.tableos.getValueAt(i, 0).equals(true)) {
                                ob.setStatus(cbstatus.getSelectedItem().toString());
                                ob.setIdtela(OS.tableos.getValueAt(i, 1).toString());

                                //SET status = ? WHERE idtela = ?
                                od.updatestatus(ob);
                            }
                        }
                        break;
                }
                OS.reados();
                this.dispose();
                break;

            case "OSnormal":
                ob.setStatus(cbstatus.getSelectedItem().toString());
                ob.setIdtela(OS.txtnumeroos.getText());

                //SET status = ? WHERE idtela = ?
                od.updatestatus(ob);

                if (cbstatus.getSelectedItem().toString().equals("Fechado")) {
////////////////////Descobrir ID do material
                    String codigo = OS.txtcodigo.getText();

                    smd.readid(codigo).forEach(smb -> {
                        idmaterial = smb.getId();
                    });

////////////////////Criar estoque novo
                    int qtdfinal = Integer.parseInt(OS.txtfinal.getText());
                    smd.readestoque(idmaterial).forEach(smb -> {
                        est = smb.getEstoque();
                    });

                    smb.setEstoque(est + qtdfinal);
                    smb.setId(idmaterial);

                    //estoque = ? WHERE id = ?
                    smd.updateestoque(smb);

////////////////////Criar Movimentação
                    smmb.setIdmaterial(idmaterial);
                    smmb.setInicial(est);
                    smmb.setMovimentada(qtdfinal);
                    smmb.setTipo("OS");
                    smmb.setSaldo(est + qtdfinal);
                    smmb.setData(Dates.CriarDataCompletaParaDB());
                    smmb.setUsuario(codigo);

                    //idmaterial, inicial, movimentada, tipo, saldo, data, usuario
                    smmd.create(smmb);
                }
                this.dispose();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox<String> cbstatus;
    public javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
