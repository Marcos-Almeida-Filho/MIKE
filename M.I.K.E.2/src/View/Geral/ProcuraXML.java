/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.Geral;

import DAO.ClientesDAO;
import DAO.FornecedoresDAO;
import DAO.RastreamentoDocumentosDAO;
import DAO.NotaFiscalDAO;
import DAO.NotaFiscalItensDAO;
import DAO.CARDAO;
import Methods.Dates;
import Methods.ReadXMLDocumento;
import Methods.SendEmail;
import Methods.Valores;
import View.financeiro.AdicionarContasAReceber;
import View.fiscal.NotasFiscais;
import View.logistica.RastreamentoDocumentos;
import java.awt.AWTException;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Marcos Filho
 */
public class ProcuraXML extends javax.swing.JInternalFrame {

    /**
     * Creates new form Documentos
     */
    public String nome, origem;
    private String ieT, obsItem;

    ClientesDAO cd = new ClientesDAO();
    FornecedoresDAO fd = new FornecedoresDAO();
    NotaFiscalDAO nfd = new NotaFiscalDAO();
    NotaFiscalItensDAO nfid = new NotaFiscalItensDAO();
    CARDAO card = new CARDAO();

    double baseIcmsStItem, valorIcmsStItem, aliquotaIcms, aliquotaIcmsSt, valorIcmsItem, qtd, valorUnitario, valorTotal;

    public ProcuraXML(String origin) {
        initComponents();
        File home = FileSystemView.getFileSystemView().getHomeDirectory();
        chooser.setCurrentDirectory(home.getAbsoluteFile());
        origem = origin;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooser = new javax.swing.JFileChooser();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setTitle("Escolha de Documento");

        chooser.setMultiSelectionEnabled(true);
        chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooserActionPerformed
        //Arquivo(s) selecionado(s)
        File fileoriginal = chooser.getSelectedFile();

        //DocumentBuilder
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = null;
        Document doc = null;

        if (evt.getActionCommand().equals("ApproveSelection")) {
            switch (origem) {
                case "Rastreamento":
                    try {
                        try {
                            dBuilder = dbFactory.newDocumentBuilder();
                        } catch (ParserConfigurationException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        try {
                            doc = dBuilder.parse(fileoriginal);
                        } catch (SAXException | IOException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        //optional, but recommended
                        //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
                        doc.getDocumentElement().normalize();

                        //Buscar CNPJ
                        NodeList cnpjlist = doc.getElementsByTagName("CNPJ");
                        Node cnpjnode = cnpjlist.item(0);

                        //Buscar Emissão
                        NodeList emilist = doc.getElementsByTagName("dhEmi");
                        Node eminode = emilist.item(0);

                        //Buscar Número
                        NodeList numlist = doc.getElementsByTagName("nNF");
                        Node numnode = numlist.item(0);

                        if (RastreamentoDocumentos.radiocliente.isSelected()) {
                            //Buscar Nome do Fornecedor no DB
                            MaskFormatter formatter = new MaskFormatter("AA.AAA.AAA/AAAA-AA");
                            formatter.setValueContainsLiteralCharacters(false);
                            String cnpj = formatter.valueToString(cnpjnode.getTextContent());

                            if (cd.checkcnpj(cnpj)) {
                                cd.readcnpj(cnpj).forEach(fb -> {
                                    nome = fb.getNome();
                                });
                                RastreamentoDocumentos.txtemitente.setText(nome);
                            } else {
                                JOptionPane.showMessageDialog(null, "Não existe um cliente cadastrado com este CNPJ!\nProcurando nos Fornecedores.");

                                RastreamentoDocumentos.radiofornecedor.setSelected(true);
                                if (fd.checknome(cnpj)) {
                                    fd.readnome(cnpj).forEach(fb -> {
                                        nome = fb.getNome();
                                    });
                                    RastreamentoDocumentos.txtemitente.setText(nome);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Não existe Fornecedor cadastrado com este CNPJ!");
                                }
                            }
                        }
                        if (RastreamentoDocumentos.radiofornecedor.isSelected()) {
                            //Buscar Nome do Fornecedor no DB
                            MaskFormatter formatter = new MaskFormatter("AA.AAA.AAA/AAAA-AA");
                            formatter.setValueContainsLiteralCharacters(false);
                            String cnpj = formatter.valueToString(cnpjnode.getTextContent());

                            if (fd.checknome(cnpj)) {
                                fd.readnome(cnpj).forEach(fb -> {
                                    nome = fb.getNome();
                                });
                                RastreamentoDocumentos.txtemitente.setText(nome);
                            } else {
                                JOptionPane.showMessageDialog(null, "Não existe Fornecedor cadastrado com este CNPJ!\nProcurando nos Clientes.");

                                RastreamentoDocumentos.radiocliente.setSelected(true);
                                if (cd.checkcnpj(cnpj)) {
                                    cd.readcnpj(cnpj).forEach(fb -> {
                                        nome = fb.getNome();
                                    });
                                    RastreamentoDocumentos.txtemitente.setText(nome);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Não existe um cliente cadastrado com este CNPJ!");
                                }
                            }
                        }

                        //Colocar informações nos txts correspondentes
                        try {
                            RastreamentoDocumentos.txtemissao.setDate(new SimpleDateFormat("dd/MM/yyyy").parse(Dates.dataxml(eminode.getTextContent())));
                        } catch (ParseException ex) {
                            Logger.getLogger(RastreamentoDocumentos.class.getName()).log(Level.SEVERE, null, ex);
                        }
//                        RastreamentoDocumentos.txtemissao.setText(Dates.dataxml(eminode.getTextContent()));
                        RastreamentoDocumentos.txtnumero.setText(numnode.getTextContent());

                        //Endereço XML
                        RastreamentoDocumentos.txtxml.setText(fileoriginal.toString());
                    } catch (DOMException e) {
                        JOptionPane.showMessageDialog(null, "Erro ao ler arquivo!\n" + e);
                        try {
                            SendEmail.EnviarErro("Erro ao ler arquivo!\n" + e.toString());
                        } catch (AWTException | IOException ex) {
                            Logger.getLogger(RastreamentoDocumentosDAO.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        dispose();
                    } catch (ParseException ex) {
                        Logger.getLogger(ProcuraXML.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    dispose();
                    break;
                case "CAR":
                    try {
                        try {
                            dBuilder = dbFactory.newDocumentBuilder();
                        } catch (ParserConfigurationException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        try {
                            doc = dBuilder.parse(fileoriginal);
                        } catch (SAXException | IOException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        //optional, but recommended
                        //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
                        doc.getDocumentElement().normalize();

                        //Buscar Destinatário
                        NodeList destlist = doc.getElementsByTagName("dest");
                        Node destnode = destlist.item(0);
                        Element destelement = (Element) destnode;

                        //Buscar Emissão
                        NodeList emilist = doc.getElementsByTagName("dhEmi");
                        Node eminode = emilist.item(0);

                        //Buscar Número
                        NodeList numlist = doc.getElementsByTagName("nNF");
                        Node numnode = numlist.item(0);

                        //Buscar Duplicatas
                        NodeList duplist = doc.getElementsByTagName("dup");
                        int qtd = duplist.getLength();

                        //Buscar vencimentos
                        NodeList vencimentolist = doc.getElementsByTagName("dVenc");

                        //Buscar valores das parcelas
                        NodeList valorlist = doc.getElementsByTagName("vDup");

                        //Buscar valor total da nota
                        NodeList totallist = doc.getElementsByTagName("ICMSTot");
                        Node totalnode = totallist.item(0);
                        Element totalelement = (Element) totalnode;

                        //Buscar Nome do Fornecedor no DB
                        MaskFormatter formatter = new MaskFormatter("AA.AAA.AAA/AAAA-AA");
                        formatter.setValueContainsLiteralCharacters(false);
                        String cnpj = formatter.valueToString(destelement.getElementsByTagName("CNPJ").item(0).getTextContent());

                        if (cd.checkcnpj(cnpj)) {
                            cd.readcnpj(cnpj).forEach(cb -> {
                                nome = cb.getNome();
                            });
                            AdicionarContasAReceber.txtcliente.setText(nome);
                        } else {
                            JOptionPane.showMessageDialog(null, "Não existe um cliente cadastrado com este CNPJ!\nNome do cliente: " + destelement.getElementsByTagName("xNome").item(0).getTextContent());
                        }

                        if (totallist.getLength() > 0) {
                            AdicionarContasAReceber.txttotal.setText(Valores.TransformarValorFloatEmDinheiro(totalelement.getElementsByTagName("vNF").item(0).getTextContent()));
                        }

                        DefaultTableModel modelparcelas = (DefaultTableModel) AdicionarContasAReceber.tableparcelas.getModel();

                        for (int i = 0; i < qtd; i++) {
                            Node vencimentonode = vencimentolist.item(i);
                            Node valornode = valorlist.item(i);
                            String parcela = i + 1 + "/" + qtd;

                            modelparcelas.addRow(new Object[]{
                                parcela,
                                Dates.TransformarDataCurtaDoDB(vencimentonode.getTextContent()),
                                Valores.TransformarValorFloatEmDinheiro(valornode.getTextContent())
                            });
                        }

                        //Colocar informações nos txts correspondentes
                        AdicionarContasAReceber.txtemissao.setText(Dates.dataxml(eminode.getTextContent()));
                        AdicionarContasAReceber.txtnumero.setText(numnode.getTextContent());
                    } catch (DOMException e) {
                        JOptionPane.showMessageDialog(null, "Erro ao ler arquivo!\n" + e);
                        try {
                            SendEmail.EnviarErro("Erro ao ler arquivo!\n" + e.toString());
                        } catch (AWTException | IOException ex) {
                            Logger.getLogger(RastreamentoDocumentosDAO.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        dispose();
                    } catch (ParseException ex) {
                        Logger.getLogger(ProcuraXML.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    dispose();
                    break;
                case "NotasFiscais":
                    NotasFiscais.pasta = chooser.getCurrentDirectory().toString();
                    for (File selectedFile : chooser.getSelectedFiles()) {
                        try {
                            dBuilder = dbFactory.newDocumentBuilder();
                        } catch (ParserConfigurationException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        try {
                            doc = dBuilder.parse(selectedFile);
                        } catch (SAXException | IOException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        //optional, but recommended
                        //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
                        doc.getDocumentElement().normalize();

                        //Buscar Número
                        NodeList numlist = doc.getElementsByTagName("nNF");
                        Node numNode = numlist.item(0);
                        int numero = Integer.parseInt(numNode.getTextContent());

                        if (nfd.notaExiste(numero)) {
                            JOptionPane.showMessageDialog(null, "Nota já cadastrada.");
                        } else {
                            //Buscar Destinatário
                            NodeList destlist = doc.getElementsByTagName("dest");
                            Node destnode = destlist.item(0);
                            Element destelement = (Element) destnode;
                            String destinatario = destelement.getElementsByTagName("xNome").item(0).getTextContent();
                            String logradouroD = destelement.getElementsByTagName("xLgr").item(0).getTextContent();
                            String numeroD = destelement.getElementsByTagName("nro").item(0).getTextContent();
                            String complementoD = "";
                            String bairroD = destelement.getElementsByTagName("xBairro").item(0).getTextContent();
                            String cidadeD = destelement.getElementsByTagName("xMun").item(0).getTextContent();
                            String ufD = destelement.getElementsByTagName("UF").item(0).getTextContent();
                            String cepD = destelement.getElementsByTagName("CEP").item(0).getTextContent();
                            String cnpjD;
                            try {
                                cnpjD = destelement.getElementsByTagName("CNPJ").item(0).getTextContent();
                            } catch (NullPointerException e) {
                                cnpjD = destelement.getElementsByTagName("CPF").item(0).getTextContent();
                            }
                            String ieD;
                            try {
                                ieD = destelement.getElementsByTagName("IE").item(0).getTextContent();
                            } catch (NullPointerException e) {
                                ieD = "";
                            }

                            //Buscar Transportadora
                            NodeList transList = doc.getElementsByTagName("transporta");
                            Node transNode = transList.item(0);
                            Element transElement = (Element) transNode;
                            String transportadora;
                            try {
                                transportadora = transElement.getElementsByTagName("xNome").item(0).getTextContent();
                            } catch (Exception e) {
                                transportadora = "";
                            }
                            String enderecoT;
                            try {
                                enderecoT = transElement.getElementsByTagName("xEnder").item(0).getTextContent();
                            } catch (Exception e) {
                                enderecoT = "";
                            }
                            String cidadeT;
                            try {
                                cidadeT = transElement.getElementsByTagName("xMun").item(0).getTextContent();
                            } catch (Exception e) {
                                cidadeT = "";
                            }
                            String ufT;
                            try {
                                ufT = transElement.getElementsByTagName("UF").item(0).getTextContent();
                            } catch (Exception e) {
                                ufT = "";
                            }
                            String cnpjT;
                            try {
                                cnpjT = transElement.getElementsByTagName("CNPJ").item(0).getTextContent();
                            } catch (Exception e) {
                                cnpjT = "";
                            }
                            try {
                                ieT = transElement.getElementsByTagName("IE").item(0).getTextContent();
                            } catch (NullPointerException e) {
                                ieT = "";
                            }

                            //Buscar Emissão
                            NodeList emilist = doc.getElementsByTagName("dhEmi");
                            Node emiNode = emilist.item(0);
                            String dataEmissao = Dates.TransformarDataXML(emiNode.getTextContent());

                            //Buscar Observação
                            NodeList obsList = doc.getElementsByTagName("infCpl");
                            Node obsNode = obsList.item(0);
                            String obs = obsNode.getTextContent();

                            //Buscar Natureza de Operação
                            NodeList natlist = doc.getElementsByTagName("natOp");
                            Node natNode = natlist.item(0);
                            String natureza = natNode.getTextContent();

                            //Buscar Valores
                            NodeList valoresList = doc.getElementsByTagName("total");
                            Node valoresNode = valoresList.item(0);
                            Element valoresElement = (Element) valoresNode;
                            double baseIcms = Double.parseDouble(valoresElement.getElementsByTagName("vBC").item(0).getTextContent());
                            double valorIcms = Double.parseDouble(valoresElement.getElementsByTagName("vICMS").item(0).getTextContent());
                            double baseIcmsSt = Double.parseDouble(valoresElement.getElementsByTagName("vBCST").item(0).getTextContent());
                            double valorIcmsSt = Double.parseDouble(valoresElement.getElementsByTagName("vST").item(0).getTextContent());
                            double valorPis = Double.parseDouble(valoresElement.getElementsByTagName("vPIS").item(0).getTextContent());
                            double valorCofins = Double.parseDouble(valoresElement.getElementsByTagName("vCOFINS").item(0).getTextContent());
                            double valorIpi = Double.parseDouble(valoresElement.getElementsByTagName("vIPI").item(0).getTextContent());
                            double valorProdutos = Double.parseDouble(valoresElement.getElementsByTagName("vProd").item(0).getTextContent());
                            double valorFrete = Double.parseDouble(valoresElement.getElementsByTagName("vFrete").item(0).getTextContent());
                            double valorTotalNotaFiscal = Double.parseDouble(valoresElement.getElementsByTagName("vNF").item(0).getTextContent());

                            //Buscar Status
                            NodeList statuslist = doc.getElementsByTagName("xMotivo");
                            Node statusNode = statuslist.item(0);
                            String status = statusNode.getTextContent();

                            //Buscar Duplicatas
                            NodeList dupList = doc.getElementsByTagName("dup");
                            for (int i = 0; i < dupList.getLength(); i++) {
                                int idCliente;
                                if (cnpjD.length() == 11) {
                                    String cpf = cnpjD.substring(0, 3) + "." + cnpjD.substring(3, 6) + "." + cnpjD.substring(6, 9) + "-" + cnpjD.substring(9, 11);
                                    idCliente = cd.getIdCpf(cpf);
                                } else {
                                    String cnpj = cnpjD.substring(0, 2) + "." + cnpjD.substring(2, 5) + "." + cnpjD.substring(5, 8) + "/" + cnpjD.substring(8, 12) + "-" + cnpjD.substring(12, 14);
                                    idCliente = cd.getIdCnpj(cnpj);
                                }
                                if (idCliente == 0) {
                                    JOptionPane.showMessageDialog(null, "Cliente não cadastrado. Favor cadastrar e atualizar CAR.");
                                }
                                Node dupNode = dupList.item(i);
                                Element dupElement = (Element) dupNode;
                                String duplicata = numero + "-" + dupElement.getElementsByTagName("nDup").item(0).getTextContent();
                                String data = dupElement.getElementsByTagName("dVenc").item(0).getTextContent();
                                double valor = Double.parseDouble(dupElement.getElementsByTagName("vDup").item(0).getTextContent());

                                card.create(idCliente, Dates.CriarDataCurtaDBSemDataExistente(), destinatario, numero, dataEmissao, valorTotalNotaFiscal, duplicata, valor, data);
                            }

                            //Buscar Itens
                            NodeList itensList = doc.getElementsByTagName("det");
                            for (int i = 0; i < itensList.getLength(); i++) {
                                Node itemNode = itensList.item(i);
                                Element itemElement = (Element) itemNode;

                                String codigo = itemElement.getElementsByTagName("cProd").item(0).getTextContent();
                                String descricao = itemElement.getElementsByTagName("xProd").item(0).getTextContent();
                                try {
                                    obsItem = itemElement.getElementsByTagName("infAdProd").item(0).getTextContent();
                                } catch (DOMException | NullPointerException e) {
                                    obsItem = "";
                                }
                                String un = itemElement.getElementsByTagName("uTrib").item(0).getTextContent();
                                String cfop = itemElement.getElementsByTagName("CFOP").item(0).getTextContent();
                                String ncm = itemElement.getElementsByTagName("NCM").item(0).getTextContent();
                                String csosn = itemElement.getElementsByTagName("CSOSN").item(0).getTextContent();
                                String cst = itemElement.getElementsByTagName("CST").item(0).getTextContent();
                                try {
                                    qtd = Double.parseDouble(itemElement.getElementsByTagName("qTrib").item(0).getTextContent());
                                } catch (NumberFormatException | DOMException | NullPointerException e) {
                                    qtd = 0;
                                }
                                try {
                                    valorUnitario = Double.parseDouble(itemElement.getElementsByTagName("vUnTrib").item(0).getTextContent());
                                } catch (NumberFormatException | DOMException | NullPointerException e) {
                                    valorUnitario = 0;
                                }
                                try {
                                    valorTotal = Double.parseDouble(itemElement.getElementsByTagName("vProd").item(0).getTextContent());
                                } catch (NumberFormatException | DOMException | NullPointerException e) {
                                    valorTotal = 0;
                                }
                                try {
                                    valorIcmsItem = Double.parseDouble(itemElement.getElementsByTagName("vCredICMSSN").item(0).getTextContent());
                                } catch (NumberFormatException | DOMException | NullPointerException e) {
                                    valorIcmsItem = 0;
                                }
                                try {
                                    aliquotaIcms = Double.parseDouble(itemElement.getElementsByTagName("pCredSN").item(0).getTextContent());
                                } catch (NumberFormatException | DOMException | NullPointerException e) {
                                    aliquotaIcms = 0;
                                }
                                try {
                                    baseIcmsStItem = Double.parseDouble(itemElement.getElementsByTagName("vBCST").item(0).getTextContent());
                                } catch (NumberFormatException | DOMException | NullPointerException e) {
                                    baseIcmsStItem = 0;
                                }
                                try {
                                    valorIcmsStItem = Double.parseDouble(itemElement.getElementsByTagName("vICMSST").item(0).getTextContent());
                                } catch (NumberFormatException | DOMException | NullPointerException e) {
                                    valorIcmsStItem = 0;
                                }
                                try {
                                    aliquotaIcmsSt = Double.parseDouble(itemElement.getElementsByTagName("pICMSST").item(0).getTextContent());
                                } catch (NumberFormatException | DOMException | NullPointerException e) {
                                    aliquotaIcmsSt = 0;
                                }

                                nfid.create(numero, codigo, descricao, obsItem, un, cfop, ncm, csosn, cst, qtd, valorUnitario, valorTotal, valorIcmsItem, baseIcmsStItem, valorIcmsStItem, aliquotaIcms, aliquotaIcmsSt);
                            }

                            nfd.create(numero, dataEmissao, destinatario, logradouroD, numeroD, complementoD, bairroD, cidadeD, ufD, cepD, cnpjD, ieD, natureza, transportadora, enderecoT, cidadeT, ufT, cnpjT, ieT, baseIcms, valorIcms, baseIcmsSt, valorIcmsSt, valorPis, valorCofins, valorIpi, valorProdutos, valorFrete, valorTotalNotaFiscal, obs, status);

                            if (dupList.getLength() > 0) {
                                try {
                                    nfd.updateVendas(numero, true);
                                } catch (SQLException e) {
                                    String msg = "Erro.";

                                    JOptionPane.showMessageDialog(null, msg + "\n" + e);

                                    new Thread() {
                                        @Override
                                        public void run() {
                                            SendEmail.EnviarErro2(msg, e);
                                        }
                                    }.start();
                                }
                            }

                            JOptionPane.showMessageDialog(null, "Nota Fiscal " + numero + " lançada com sucesso!");

                            NotasFiscais.lerNotasFiscais();
                        }
                    }
                    dispose();
                    break;
            }
        } else {
            dispose();
        }
    }//GEN-LAST:event_chooserActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JFileChooser chooser;
    // End of variables declaration//GEN-END:variables
}
