/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.Geral;

import DAO.ClientesDAO;
import DAO.FornecedoresDAO;
import DAO.RastreamentoDocumentosDAO;
import Methods.Dates;
import Methods.ReadXMLDocumento;
import Methods.SendEmail;
import Methods.Valores;
import View.financeiro.AdicionarContasAReceber;
import View.fiscal.NotasFiscais;
import View.logistica.RastreamentoDocumentos;
import java.awt.AWTException;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Marcos Filho
 */
public class ProcuraXML extends javax.swing.JInternalFrame {

    /**
     * Creates new form Documentos
     */
    public String nome, origem;

    ClientesDAO cd = new ClientesDAO();
    FornecedoresDAO fd = new FornecedoresDAO();

    public ProcuraXML(String origin) {
        initComponents();
        File home = FileSystemView.getFileSystemView().getHomeDirectory();
        chooser.setCurrentDirectory(home.getAbsoluteFile());
        origem = origin;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooser = new javax.swing.JFileChooser();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setTitle("Escolha de Documento");

        chooser.setMultiSelectionEnabled(true);
        chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooserActionPerformed
        //Arquivo(s) selecionado(s)
        File fileoriginal = chooser.getSelectedFile();

        //DocumentBuilder
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = null;
        Document doc = null;

        if (evt.getActionCommand().equals("ApproveSelection")) {
            switch (origem) {
                case "Rastreamento":
                    try {
                        try {
                            dBuilder = dbFactory.newDocumentBuilder();
                        } catch (ParserConfigurationException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        try {
                            doc = dBuilder.parse(fileoriginal);
                        } catch (SAXException | IOException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        //optional, but recommended
                        //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
                        doc.getDocumentElement().normalize();

                        //Buscar CNPJ
                        NodeList cnpjlist = doc.getElementsByTagName("CNPJ");
                        Node cnpjnode = cnpjlist.item(0);

                        //Buscar Emissão
                        NodeList emilist = doc.getElementsByTagName("dhEmi");
                        Node eminode = emilist.item(0);

                        //Buscar Número
                        NodeList numlist = doc.getElementsByTagName("nNF");
                        Node numnode = numlist.item(0);

                        if (RastreamentoDocumentos.radiocliente.isSelected()) {
                            //Buscar Nome do Fornecedor no DB
                            MaskFormatter formatter = new MaskFormatter("AA.AAA.AAA/AAAA-AA");
                            formatter.setValueContainsLiteralCharacters(false);
                            String cnpj = formatter.valueToString(cnpjnode.getTextContent());

                            if (cd.checkcnpj(cnpj)) {
                                cd.readcnpj(cnpj).forEach(fb -> {
                                    nome = fb.getNome();
                                });
                                RastreamentoDocumentos.txtemitente.setText(nome);
                            } else {
                                JOptionPane.showMessageDialog(null, "Não existe um cliente cadastrado com este CNPJ!\nProcurando nos Fornecedores.");

                                RastreamentoDocumentos.radiofornecedor.setSelected(true);
                                if (fd.checknome(cnpj)) {
                                    fd.readnome(cnpj).forEach(fb -> {
                                        nome = fb.getNome();
                                    });
                                    RastreamentoDocumentos.txtemitente.setText(nome);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Não existe Fornecedor cadastrado com este CNPJ!");
                                }
                            }
                        }
                        if (RastreamentoDocumentos.radiofornecedor.isSelected()) {
                            //Buscar Nome do Fornecedor no DB
                            MaskFormatter formatter = new MaskFormatter("AA.AAA.AAA/AAAA-AA");
                            formatter.setValueContainsLiteralCharacters(false);
                            String cnpj = formatter.valueToString(cnpjnode.getTextContent());

                            if (fd.checknome(cnpj)) {
                                fd.readnome(cnpj).forEach(fb -> {
                                    nome = fb.getNome();
                                });
                                RastreamentoDocumentos.txtemitente.setText(nome);
                            } else {
                                JOptionPane.showMessageDialog(null, "Não existe Fornecedor cadastrado com este CNPJ!\nProcurando nos Clientes.");

                                RastreamentoDocumentos.radiocliente.setSelected(true);
                                if (cd.checkcnpj(cnpj)) {
                                    cd.readcnpj(cnpj).forEach(fb -> {
                                        nome = fb.getNome();
                                    });
                                    RastreamentoDocumentos.txtemitente.setText(nome);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Não existe um cliente cadastrado com este CNPJ!");
                                }
                            }
                        }

                        //Colocar informações nos txts correspondentes
                        try {
                            RastreamentoDocumentos.txtemissao.setDate(new SimpleDateFormat("dd/MM/yyyy").parse(Dates.dataxml(eminode.getTextContent())));
                        } catch (ParseException ex) {
                            Logger.getLogger(RastreamentoDocumentos.class.getName()).log(Level.SEVERE, null, ex);
                        }
//                        RastreamentoDocumentos.txtemissao.setText(Dates.dataxml(eminode.getTextContent()));
                        RastreamentoDocumentos.txtnumero.setText(numnode.getTextContent());

                        //Endereço XML
                        RastreamentoDocumentos.txtxml.setText(fileoriginal.toString());
                    } catch (DOMException e) {
                        JOptionPane.showMessageDialog(null, "Erro ao ler arquivo!\n" + e);
                        try {
                            SendEmail.EnviarErro("Erro ao ler arquivo!\n" + e.toString());
                        } catch (AWTException | IOException ex) {
                            Logger.getLogger(RastreamentoDocumentosDAO.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        dispose();
                    } catch (ParseException ex) {
                        Logger.getLogger(ProcuraXML.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    dispose();
                    break;
                case "CAR":
                    try {
                        try {
                            dBuilder = dbFactory.newDocumentBuilder();
                        } catch (ParserConfigurationException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        try {
                            doc = dBuilder.parse(fileoriginal);
                        } catch (SAXException | IOException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        //optional, but recommended
                        //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
                        doc.getDocumentElement().normalize();

                        //Buscar Destinatário
                        NodeList destlist = doc.getElementsByTagName("dest");
                        Node destnode = destlist.item(0);
                        Element destelement = (Element) destnode;

                        //Buscar Emissão
                        NodeList emilist = doc.getElementsByTagName("dhEmi");
                        Node eminode = emilist.item(0);

                        //Buscar Número
                        NodeList numlist = doc.getElementsByTagName("nNF");
                        Node numnode = numlist.item(0);

                        //Buscar Duplicatas
                        NodeList duplist = doc.getElementsByTagName("dup");
                        int qtd = duplist.getLength();

                        //Buscar vencimentos
                        NodeList vencimentolist = doc.getElementsByTagName("dVenc");

                        //Buscar valores das parcelas
                        NodeList valorlist = doc.getElementsByTagName("vDup");

                        //Buscar valor total da nota
                        NodeList totallist = doc.getElementsByTagName("ICMSTot");
                        Node totalnode = totallist.item(0);
                        Element totalelement = (Element) totalnode;

                        //Buscar Nome do Fornecedor no DB
                        MaskFormatter formatter = new MaskFormatter("AA.AAA.AAA/AAAA-AA");
                        formatter.setValueContainsLiteralCharacters(false);
                        String cnpj = formatter.valueToString(destelement.getElementsByTagName("CNPJ").item(0).getTextContent());

                        if (cd.checkcnpj(cnpj)) {
                            cd.readcnpj(cnpj).forEach(cb -> {
                                nome = cb.getNome();
                            });
                            AdicionarContasAReceber.txtcliente.setText(nome);
                        } else {
                            JOptionPane.showMessageDialog(null, "Não existe um cliente cadastrado com este CNPJ!\nNome do cliente: " + destelement.getElementsByTagName("xNome").item(0).getTextContent());
                        }

                        if (totallist.getLength() > 0) {
                            AdicionarContasAReceber.txttotal.setText(Valores.TransformarValorFloatEmDinheiro(totalelement.getElementsByTagName("vNF").item(0).getTextContent()));
                        }

                        DefaultTableModel modelparcelas = (DefaultTableModel) AdicionarContasAReceber.tableparcelas.getModel();

                        for (int i = 0; i < qtd; i++) {
                            Node vencimentonode = vencimentolist.item(i);
                            Node valornode = valorlist.item(i);
                            String parcela = i + 1 + "/" + qtd;

                            modelparcelas.addRow(new Object[]{
                                parcela,
                                Dates.TransformarDataCurtaDoDB(vencimentonode.getTextContent()),
                                Valores.TransformarValorFloatEmDinheiro(valornode.getTextContent())
                            });
                        }

                        //Colocar informações nos txts correspondentes
                        AdicionarContasAReceber.txtemissao.setText(Dates.dataxml(eminode.getTextContent()));
                        AdicionarContasAReceber.txtnumero.setText(numnode.getTextContent());
                    } catch (DOMException e) {
                        JOptionPane.showMessageDialog(null, "Erro ao ler arquivo!\n" + e);
                        try {
                            SendEmail.EnviarErro("Erro ao ler arquivo!\n" + e.toString());
                        } catch (AWTException | IOException ex) {
                            Logger.getLogger(RastreamentoDocumentosDAO.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        dispose();
                    } catch (ParseException ex) {
                        Logger.getLogger(ProcuraXML.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    dispose();
                    break;
                case "NotasFiscais":
                    for (File selectedFile : chooser.getSelectedFiles()) {
                        try {
                            dBuilder = dbFactory.newDocumentBuilder();
                        } catch (ParserConfigurationException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        try {
                            doc = dBuilder.parse(selectedFile);
                        } catch (SAXException | IOException ex) {
                            Logger.getLogger(ReadXMLDocumento.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        //optional, but recommended
                        //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
                        doc.getDocumentElement().normalize();
                        
                        //Buscar Destinatário
                        NodeList destlist = doc.getElementsByTagName("dest");
                        Node destnode = destlist.item(0);
                        Element destelement = (Element) destnode;

                        //Buscar Emissão
                        NodeList emilist = doc.getElementsByTagName("dhEmi");
                        Node eminode = emilist.item(0);

                        //Buscar Número
                        NodeList numlist = doc.getElementsByTagName("nNF");
                        Node numnode = numlist.item(0);
                        
                        //Buscar Natureza de Operação
                        NodeList natlist = doc.getElementsByTagName("natOp");
                        Node natnode = natlist.item(0);
                        
                        //Status
                        NodeList statuslist = doc.getElementsByTagName("xMotivo");
                        Node statusnode = statuslist.item(0);
                        
                        DefaultTableModel modelnf = (DefaultTableModel) NotasFiscais.tablenf.getModel();
                        modelnf.addRow(new Object[]{
                            "",
                            numnode.getTextContent(),
                            destelement.getElementsByTagName("xNome").item(0).getTextContent(),
                            natnode.getTextContent(),
                            statusnode.getTextContent()
                        });
                    }
                    dispose();
                    break;
            }
        } else {
            dispose();
        }
    }//GEN-LAST:event_chooserActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JFileChooser chooser;
    // End of variables declaration//GEN-END:variables
}
